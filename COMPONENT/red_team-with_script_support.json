[
  {
    "agent": "intelligence_gatherer",
    "run_script": {
      "path": "tools/osint_toolkit.py",
      "input_params": {
        "target_domain": "$target_domain",
        "tools": ["theHarvester", "spiderfoot", "amass", "github-dorks"],
        "output_dir": "results/osint"
      }
    },
    "use_script_output_as_content": true,
    "content": "Analyze the OSINT data collected by the open-source tools. Identify the most relevant information from theHarvester (email addresses, subdomains), Spiderfoot (digital footprint, relationships), Amass (domain intelligence), and GitHub dork results. Determine the organization's structure, digital assets, employee information, technology stack, and potential vulnerabilities that could be exploited through social engineering or technical means.",
    "tools": ["osint:gather", "socmint:analyze", "domain:enumerate"],
    "output_format": {
      "type": "json",
      "schema": {
        "org_structure": "object",
        "digital_assets": ["string"],
        "employee_info": ["object"],
        "technology_stack": ["string"],
        "potential_vulnerabilities": ["string"],
        "phishing_vectors": ["string"]
      }
    },
    "memory_id": "red_team_exercise"
  },
  {
    "agent": "infrastructure_scanner",
    "run_script": {
      "path": "tools/infra_scan_toolkit.py",
      "input_params": {
        "target_domain": "$target_domain",
        "ip_ranges": "$intelligence_gatherer.digital_assets",
        "tools": ["nmap", "masscan", "dnsenum", "aquatone", "shodan-cli"],
        "stealth_mode": true,
        "output_dir": "results/infrastructure"
      }
    },
    "use_script_output_as_content": true,
    "content": "Analyze the infrastructure scan results from Nmap (detailed service enumeration), Masscan (rapid port scanning), DNSenum (DNS information), Aquatone (visual reconnaissance), and Shodan (internet-facing assets). Identify network topology, exposed services, subdomains, cloud resources, IP ranges, and potential entry points. Assess the detectability of the scanning techniques used and evaluate which attack vectors would be most promising.",
    "readFrom": ["intelligence_gatherer"],
    "tools": ["network:scan", "subdomain:enumerate", "service:identify", "cloud:discover"],
    "memory_id": "red_team_exercise",
    "output_format": {
      "type": "json",
      "schema": {
        "ip_ranges": ["string"],
        "domain_map": ["string"],
        "exposed_services": ["object"],
        "cloud_resources": ["string"],
        "potential_entry_points": ["string"],
        "scan_detectability": "string"
      }
    }
  },
  {
    "agent": "vulnerability_assessor",
    "run_script": {
      "path": "tools/vuln_scan_toolkit.py",
      "input_params": {
        "target_services": "$infrastructure_scanner.exposed_services",
        "tools": ["openvas", "nikto", "wpscan", "sqlmap", "nuclei"],
        "output_dir": "results/vulnerabilities"
      }
    },
    "use_script_output_as_content": true,
    "content": "Analyze the vulnerability scan results from OpenVAS (comprehensive vulnerability scanning), Nikto (web server assessment), WPScan (WordPress vulnerabilities), SQLMap (SQL injection testing), and Nuclei (template-based scanning). Identify and prioritize exploitable vulnerabilities in the target infrastructure, including known CVEs, misconfigurations, weak credentials, and business logic flaws. Categorize findings by severity and provide exploitation paths for the most critical vulnerabilities.",
    "readFrom": ["infrastructure_scanner"],
    "tools": ["vuln:scan", "config:analyze", "exploit:search", "port:probe"],
    "memory_id": "red_team_exercise",
    "output_format": {
      "type": "json",
      "schema": {
        "critical_vulnerabilities": ["object"],
        "high_vulnerabilities": ["object"],
        "medium_vulnerabilities": ["object"],
        "misconfigurations": ["object"],
        "weak_credentials": ["string"],
        "exploitation_paths": ["string"]
      }
    }
  },
  {
    "agent": "social_engineer",
    "run_script": {
      "path": "tools/social_engineering_toolkit.py",
      "input_params": {
        "target_employees": "$intelligence_gatherer.employee_info",
        "org_data": "$intelligence_gatherer.org_structure",
        "tools": ["gophish", "social-engineer-toolkit", "king-phisher"],
        "output_dir": "results/social_engineering"
      }
    },
    "use_script_output_as_content": true,
    "content": "Analyze the social engineering campaign templates generated by GoPhish, SET (Social-Engineer Toolkit), and King-Phisher. Design targeted phishing scenarios, pretexting scenarios, and other social manipulation techniques based on the gathered intelligence. Create convincing lures to harvest credentials or deliver payloads, and develop metrics to measure the theoretical success rate of each campaign.",
    "readFrom": ["intelligence_gatherer"],
    "tools": ["phishing:campaign", "template:create", "email:spoof", "tracking:implement"],
    "memory_id": "red_team_exercise",
    "output_format": {
      "type": "json",
      "schema": {
        "campaign_type": "string",
        "target_groups": ["string"],
        "lure_themes": ["string"],
        "technical_mechanisms": ["string"],
        "success_metrics": "object",
        "credential_harvest": "boolean",
        "payload_delivery": "boolean"
      }
    }
  },
  {
    "agent": "payload_developer",
    "run_script": {
      "path": "tools/payload_development_toolkit.py",
      "input_params": {
        "target_tech": "$intelligence_gatherer.technology_stack",
        "vulnerabilities": "$vulnerability_assessor.critical_vulnerabilities",
        "tools": ["metasploit", "veil", "empire", "shellter", "msfvenom"],
        "evasion_level": "high",
        "output_dir": "results/payloads"
      }
    },
    "use_script_output_as_content": true,
    "content": "Analyze the malicious payloads generated by Metasploit, Veil Framework, Empire, Shellter, and MSFvenom. Design custom payloads for initial access and post-exploitation that would evade security controls. Include capabilities for persistence, command and control, lateral movement, and privilege escalation. Evaluate the effectiveness of different evasion techniques against common security solutions.",
    "readFrom": ["intelligence_gatherer", "vulnerability_assessor"],
    "tools": ["payload:build", "obfuscation:apply", "evasion:implement", "c2:configure"],
    "memory_id": "red_team_exercise",
    "output_format": {
      "type": "json",
      "schema": {
        "payload_types": ["string"],
        "evasion_techniques": ["string"],
        "c2_infrastructure": "object",
        "capabilities": ["string"],
        "delivery_methods": ["string"],
        "target_environments": ["string"]
      }
    }
  },
  {
    "agent": "initial_access_operator",
    "run_script": {
      "path": "tools/initial_access_simulator.py",
      "input_params": {
        "phishing_campaign": "$social_engineer.campaign_type",
        "payloads": "$payload_developer.payload_types",
        "target_systems": "$infrastructure_scanner.potential_entry_points",
        "tools": ["caldera", "atomic-red-team", "infection-monkey"],
        "simulation_only": true,
        "output_dir": "results/initial_access"
      }
    },
    "use_script_output_as_content": true,
    "content": "Analyze the simulated initial access operations conducted using CALDERA (automated adversary emulation), Atomic Red Team (TTPs execution), and Infection Monkey (breach simulation). Evaluate the effectiveness of different access vectors, including phishing, external service exploitation, and supply chain compromise. Determine the most likely successful approach for establishing footholds in the target environment and estimate the detection likelihood.",
    "readFrom": ["intelligence_gatherer", "vulnerability_assessor", "social_engineer", "payload_developer"],
    "tools": ["delivery:execute", "exploit:execute", "c2:establish", "access:verify"],
    "memory_id": "red_team_exercise",
    "output_format": {
      "type": "json",
      "schema": {
        "access_vector": "string",
        "timestamp": "string",
        "target_system": "string",
        "access_level": "string",
        "persistence_status": "boolean",
        "c2_channel": "string",
        "detection_evidence": "string"
      }
    }
  },
  {
    "agent": "persistence_establisher",
    "run_script": {
      "path": "tools/persistence_toolkit.py",
      "input_params": {
        "compromised_systems": "$initial_access_operator.target_system",
        "access_level": "$initial_access_operator.access_level",
        "tools": ["empire", "metasploit", "powersploit", "covenant"],
        "simulation_only": true,
        "output_dir": "results/persistence"
      }
    },
    "use_script_output_as_content": true,
    "content": "Analyze the persistence mechanisms simulated using Empire, Metasploit, PowerSploit, and Covenant C2 frameworks. Evaluate multiple persistence techniques including backdoors, rogue accounts, startup modifications, scheduled tasks, and registry changes. Determine which methods would be most effective for maintaining long-term access while evading detection, and assess the stealth level of each technique.",
    "readFrom": ["initial_access_operator", "payload_developer"],
    "tools": ["backdoor:install", "account:create", "startup:modify", "schedule:task", "service:create"],
    "memory_id": "red_team_exercise",
    "output_format": {
      "type": "json",
      "schema": {
        "persistence_mechanisms": ["object"],
        "privileged_accounts": ["string"],
        "startup_modifications": ["string"],
        "scheduled_tasks": ["string"],
        "registry_changes": ["string"],
        "stealth_assessment": "string"
      }
    }
  },
  {
    "agent": "privilege_escalator",
    "run_script": {
      "path": "tools/privesc_toolkit.py",
      "input_params": {
        "system_info": "$initial_access_operator.target_system",
        "current_access": "$initial_access_operator.access_level",
        "tools": ["beroot", "linpeas", "winpeas", "bloodhound", "powerup"],
        "output_dir": "results/privesc"
      }
    },
    "use_script_output_as_content": true,
    "content": "Analyze the privilege escalation paths identified by BeRoot, LinPEAS, WinPEAS, BloodHound, and PowerUp. Determine the most viable techniques to escalate privileges on compromised systems, including local vulnerabilities, credential theft, token manipulation, UAC bypasses, and misconfigured permissions. Assess which methods would provide the highest level of access with the least chance of detection.",
    "readFrom": ["initial_access_operator", "persistence_establisher"],
    "tools": ["local:exploit", "credential:dump", "token:manipulate", "uac:bypass", "kernel:exploit"],
    "memory_id": "red_team_exercise",
    "output_format": {
      "type": "json",
      "schema": {
        "escalation_vector": "string",
        "initial_privilege": "string",
        "final_privilege": "string",
        "exploited_vulnerabilities": ["string"],
        "captured_credentials": ["string"],
        "obtained_tokens": ["string"]
      }
    }
  },
  {
    "agent": "credential_harvester",
    "run_script": {
      "path": "tools/credential_harvesting_toolkit.py",
      "input_params": {
        "target_systems": "$initial_access_operator.target_system",
        "access_level": "$privilege_escalator.final_privilege",
        "tools": ["mimikatz", "lazagne", "credsniper", "responder", "hashcat"],
        "output_dir": "results/credentials"
      }
    },
    "use_script_output_as_content": true,
    "content": "Analyze the credential harvesting results from Mimikatz, LaZagne, CredSniper, Responder, and Hashcat. Identify the types of credentials that could be obtained from compromised systems, including plaintext passwords, password hashes, tokens, cookies, certificates, and service accounts. Evaluate which credentials would provide the most valuable access for lateral movement and privilege escalation.",
    "readFrom": ["initial_access_operator", "privilege_escalator"],
    "tools": ["memory:dump", "hash:extract", "keylog:deploy", "database:query", "traffic:capture"],
    "memory_id": "red_team_exercise",
    "output_format": {
      "type": "json",
      "schema": {
        "credential_types": ["string"],
        "plaintext_credentials": ["string"],
        "password_hashes": ["string"],
        "tokens_cookies": ["string"],
        "certificates_keys": ["string"],
        "service_accounts": ["string"]
      }
    }
  },
  {
    "agent": "lateral_movement_operator",
    "run_script": {
      "path": "tools/lateral_movement_toolkit.py",
      "input_params": {
        "network_topology": "$network_mapper.network_topology",
        "compromised_systems": ["$initial_access_operator.target_system"],
        "credentials": "$credential_harvester.plaintext_credentials",
        "tools": ["covenant", "impacket", "bloodhound", "powerlessshell", "evil-winrm"],
        "simulation_only": true,
        "output_dir": "results/lateral_movement"
      }
    },
    "use_script_output_as_content": true,
    "content": "Analyze the lateral movement techniques simulated using Covenant, Impacket, BloodHound, PowerLessShell, and Evil-WinRM. Identify optimal paths for moving across the network to compromise additional systems using harvested credentials, exploited trust relationships, and remote service exploitation. Determine which techniques would be most effective while minimizing detection risk.",
    "readFrom": ["initial_access_operator", "privilege_escalator", "credential_harvester", "network_mapper"],
    "tools": ["session:pivot", "psexec:execute", "wmi:execute", "rdp:hijack", "ssh:lateral"],
    "memory_id": "red_team_exercise",
    "output_format": {
      "type": "json",
      "schema": {
        "movement_techniques": ["string"],
        "compromised_systems": ["string"],
        "network_segments": ["string"],
        "access_levels": ["object"],
        "detection_evidence": ["string"],
        "pivoting_infrastructure": ["string"]
      }
    }
  },
  {
    "agent": "network_mapper",
    "run_script": {
      "path": "tools/internal_network_mapping_toolkit.py",
      "input_params": {
        "compromised_hosts": "$initial_access_operator.target_system",
        "access_level": "$privilege_escalator.final_privilege",
        "tools": ["bloodhound", "pingcastle", "netexec", "responder", "adexplorer"],
        "simulation_mode": true,
        "output_dir": "results/network_mapping"
      }
    },
    "use_script_output_as_content": true,
    "content": "Analyze the internal network mapping data gathered by BloodHound (Active Directory analysis), PingCastle (AD security assessment), NetExec (network service enumeration), Responder (LLMNR/NBT-NS analysis), and ADExplorer (AD exploration). Identify critical assets, sensitive data repositories, authentication servers, backup systems, and network security controls. Map trust relationships and security boundaries for lateral movement targeting.",
    "readFrom": ["initial_access_operator", "lateral_movement_operator"],
    "tools": ["network:discover", "traffic:analyze", "asset:identify", "trust:map", "segment:analyze"],
    "memory_id": "red_team_exercise",
    "output_format": {
      "type": "json",
      "schema": {
        "network_topology": "object",
        "critical_assets": ["string"],
        "data_repositories": ["string"],
        "authentication_infrastructure": ["string"],
        "security_controls": ["string"],
        "trust_relationships": ["string"]
      }
    }
  },
  {
    "agent": "data_exfiltrator",
    "run_script": {
      "path": "tools/exfil_simulation_toolkit.py",
      "input_params": {
        "target_repositories": "$network_mapper.data_repositories",
        "access_systems": "$lateral_movement_operator.compromised_systems",
        "security_controls": "$network_mapper.security_controls",
        "tools": ["dnscat2", "tunna", "cloakify", "egress-assess", "exfiltrator"],
        "simulation_only": true,
        "output_dir": "results/exfiltration"
      }
    },
    "use_script_output_as_content": true,
    "content": "Analyze the data exfiltration techniques simulated using DNScat2 (DNS tunneling), Tunna (HTTP tunneling), Cloakify (data transformation), Egress-Assess (egress testing), and Exfiltrator. Identify the most effective methods for locating, collecting, and extracting sensitive data from compromised systems while evading detection. Assess which techniques would be most successful against the target's security controls and estimate the potential business impact of data breaches.",
    "readFrom": ["network_mapper", "lateral_movement_operator"],
    "tools": ["data:search", "data:compress", "steganography:apply", "exfil:execute", "dns:tunnel"],
    "memory_id": "red_team_exercise",
    "output_format": {
      "type": "json",
      "schema": {
        "data_types": ["string"],
        "data_volume": "string",
        "exfiltration_methods": ["string"],
        "exfiltration_timing": "string",
        "detection_evidence": "string",
        "business_impact": "string"
      }
    }
  },
  {
    "agent": "defense_evasion_specialist",
    "run_script": {
      "path": "tools/defense_evasion_toolkit.py",
      "input_params": {
        "security_controls": "$network_mapper.security_controls",
        "target_systems": "$lateral_movement_operator.compromised_systems", 
        "payloads": "$payload_developer.payload_types",
        "tools": ["shellter", "veil", "invoke-obfuscation", "demiguise", "donut"],
        "output_dir": "results/evasion"
      }
    },
    "use_script_output_as_content": true,
    "content": "Analyze the defense evasion techniques tested using Shellter (dynamic shellcode injection), Veil (payload generators), Invoke-Obfuscation (PowerShell obfuscation), Demiguise (HTA payload obfuscation), and Donut (in-memory loader). Evaluate the effectiveness of different methods to bypass security controls including antivirus, EDR, traffic monitoring, and logging systems. Identify blind spots in the defensive architecture and estimate potential dwell time before detection.",
    "readFrom": ["payload_developer", "initial_access_operator", "lateral_movement_operator", "network_mapper"],
    "tools": ["av:evade", "edr:bypass", "logs:manipulate", "traffic:obfuscate", "forensics:confuse"],
    "memory_id": "red_team_exercise",
    "output_format": {
      "type": "json",
      "schema": {
        "evasion_techniques": ["string"],
        "bypassed_controls": ["string"],
        "detection_gaps": ["string"],
        "logging_weaknesses": ["string"],
        "dwell_time_estimate": "string",
        "recommendations": ["string"]
      }
    }
  },
  {
    "agent": "impact_demonstrator",
    "run_script": {
      "path": "tools/impact_analysis_toolkit.py",
      "input_params": {
        "critical_assets": "$network_mapper.critical_assets",
        "business_processes": "$network_mapper.network_topology.business_processes",
        "potential_access": "$lateral_movement_operator.compromised_systems",
        "tools": ["atomic-red-team", "caldera", "infection-monkey", "mitre-attack-navigator"],
        "output_dir": "results/impact"
      }
    },
    "use_script_output_as_content": true,
    "content": "Analyze the potential business impact based on simulations from Atomic Red Team, CALDERA, Infection Monkey, and MITRE ATT&CK Navigator. Assess the consequences of simulated attacks on availability, integrity, and confidentiality. Evaluate business impacts from service disruptions, data manipulation, and critical function interruption to quantify the severity of identified vulnerabilities in business terms.",
    "readFrom": ["network_mapper", "lateral_movement_operator", "privilege_escalator"],
    "tools": ["dos:simulate", "database:manipulate", "service:disrupt", "business:analyze"],
    "memory_id": "red_team_exercise",
    "output_format": {
      "type": "json",
      "schema": {
        "impact_categories": ["string"],
        "affected_services": ["string"],
        "business_processes": ["string"],
        "financial_estimate": "string",
        "recovery_time": "string",
        "reputational_impact": "string"
      }
    }
  },
  {
    "agent": "detection_analyzer",
    "run_script": {
      "path": "tools/detection_analysis_toolkit.py",
      "input_params": {
        "technique_data": {
          "initial_access": "$initial_access_operator.detection_evidence",
          "lateral_movement": "$lateral_movement_operator.detection_evidence",
          "data_exfil": "$data_exfiltrator.detection_evidence"
        },
        "security_controls": "$network_mapper.security_controls",
        "tools": ["purple-team-attack-automation", "atomic-red-team", "prelude-operator", "attack-navigator"],
        "output_dir": "results/detection"
      }
    },
    "use_script_output_as_content": true,
    "content": "Analyze the detection capabilities assessment conducted using Purple Team Attack Automation, Atomic Red Team, Prelude Operator, and ATT&CK Navigator. Evaluate which security controls detected the simulated activities, project incident response actions, and assess overall defense effectiveness. Identify detection gaps and recommend improvements to security monitoring and response capabilities.",
    "readFrom": ["initial_access_operator", "lateral_movement_operator", "defense_evasion_specialist", "impact_demonstrator"],
    "tools": ["detection:analyze", "response:evaluate", "timeline:construct"],
    "memory_id": "red_team_exercise",
    "output_format": {
      "type": "json",
      "schema": {
        "detected_activities": ["string"],
        "missed_activities": ["string"],
        "response_actions": ["string"],
        "response_timeline": "object",
        "defense_effectiveness": "string",
        "improvement_areas": ["string"]
      }
    }
  },
  {
    "agent": "attack_visualizer",
    "run_script": {
      "path": "tools/attack_visualization_toolkit.py",
      "input_params": {
        "intelligence_data": "$intelligence_gatherer",
        "vulnerabilities": "$vulnerability_assessor",
        "access_paths": "$initial_access_operator",
        "lateral_movement": "$lateral_movement_operator",
        "network_topology": "$network_mapper.network_topology",
        "tools": ["attack-navigator", "bloodhound", "threatconnect", "maltego", "drawio"],
        "output_format": "html",
        "output_dir": "results/visualization"
      }
    },
    "use_script_output_as_content": true,
    "content": "Analyze the visual representations of attack paths created using ATT&CK Navigator, BloodHound, ThreatConnect, Maltego, and Draw.io. Identify the most critical attack paths, their likelihood of success, and potential impact. Determine key chokepoints where defensive controls could be most effective at disrupting attack chains.",
    "readFrom": ["intelligence_gatherer", "vulnerability_assessor", "initial_access_operator", "lateral_movement_operator", "network_mapper"],
    "memory_id": "red_team_exercise",
    "output_format": {
      "type": "markdown",
      "sections": [
        "Attack Path Overview",
        "Critical Path Analysis",
        "Defense Recommendations"
      ]
    }
  },
  {
    "agent": "report_generator",
    "run_script": {
      "path": "tools/report_generation_toolkit.py",
      "input_params": {
        "all_findings": true,
        "executive_summary": true,
        "technical_details": true,
        "tools": ["dradis", "faraday", "metasploit-pro", "ghostwriter", "markdown"],
        "output_dir": "results/reports"
      }
    },
    "use_script_output_as_content": true,
    "content": "Generate a comprehensive red team report using data structured by Dradis, Faraday, Metasploit Pro, and Ghostwriter. Document methodology, findings, attack paths, evidence, business impacts, and strategic recommendations. Include technical details for remediation teams and an executive summary for leadership. The report should present a clear narrative of the attack chain and prioritize remediation efforts.",
    "readFrom": ["intelligence_gatherer", "vulnerability_assessor", "initial_access_operator", "lateral_movement_operator", "privilege_escalator", "data_exfiltrator", "impact_demonstrator", "detection_analyzer", "attack_visualizer"],
    "memory_id": "red_team_exercise",
    "output_format": {
      "type": "markdown",
      "sections": [
        "Executive Summary",
        "Engagement Overview",
        "Methodology",
        "Attack Path Summary",
        "Technical Findings",
        "Business Impact Analysis",
        "Detection & Response Assessment",
        "Strategic Recommendations",
        "Tactical Remediations",
        "Appendices: Technical Evidence",
        "Appendices: Tools and Techniques",
        "Appendices: Timeline of Activities"
      ]
    }
  }
]
