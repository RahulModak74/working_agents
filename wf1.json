{
  "agent1": {
    "text_content": "```python\n# network_security_workflow.py\n\nimport json\n\ndef load_workflow(json_file):\n    \"\"\"\n    Load the JSON workflow configuration file.\n\n    Args:\n        json_file (str): Path to the JSON file.\n\n    Returns:\n        dict: Parsed JSON data.\n    \"\"\"\n    with open(json_file, 'r') as f:\n        data = json.load(f)\n    return data\n\ndef analyze_firewall_rules(rules):\n    \"\"\"\n    Analyze firewall rules.\n\n    Args:\n        rules (list): List of firewall rule dictionaries.\n\n    Returns:\n        list: List of questionable or risky rules.\n    \"\"\"\n    risky_rules = []\n    for rule in rules:\n        # Example heuristic: Alert on rules that allow all traffic\n        if rule.get('action') == 'allow' and (rule.get('source') == 'any' or rule.get('destination') == 'any'):\n            risky_rules.append(rule)\n    return risky_rules\n\ndef check_unusual_login(activity_logs):\n    \"\"\"\n    Check for unusual or suspicious login attempts.\n\n    Args:\n        activity_logs (list): List of login event dictionaries.\n\n    Returns:\n        list: List of suspicious login activities.\n    \"\"\"\n    suspicious = []\n    for log in activity_logs:\n        # Example heuristic: failed logins, or logins from unusual locations\n        if log.get('status') == 'failed' or log.get('location') not in ['expected_location1', 'expected_location2']:\n            suspicious.append(log)\n    return suspicious\n\ndef generate_report(issues):\n    \"\"\"\n    Generate a report from detected issues.\n\n    Args:\n        issues (dict): Dictionary of issue categories and corresponding items.\n\n    Returns:\n        None\n    \"\"\"\n    print(\"=== Network Security Report ===\")\n    for category, items in issues.items():\n        print(f\"\\n{category}:\")\n        if not items:\n            print(\"  None found.\")\n        for item in items:\n            print(f\"  - {item}\")\n\ndef main():\n    # Load workflow configuration\n    workflow_config = load_workflow('network_security.json')\n\n    # Extract relevant workflow sections\n    firewall_rules = workflow_config.get('firewall_rules', [])\n    activity_logs = workflow_config.get('login_activity', [])\n\n    # Run analysis\n    risky_rules = analyze_firewall_rules(firewall_rules)\n    suspicious_logins = check_unusual_login(activity_logs)\n\n    # Collate and report\n    issues = {\n        'Risky Firewall Rules': risky_rules,\n        'Suspicious Logins': suspicious_logins\n    }\n\n    generate_report(issues)\n\nif __name__ == \"__main__\":\n    main()\n```"
  }
}