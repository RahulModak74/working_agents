```markdown
# Immediate Traffic Blocking Strategy Based on Analysis (March 2024)

## 1. IP Address Blocks

Block traffic **immediately** from the following IP addresses, responsible for confirmed hostile activity campaigns, SQL injection, scanning, brute-force, and privilege escalation attempts:

| IP Address       | Reason                                         | Recommended Action        |
|------------------|------------------------------------------------|---------------------------|
| 185.220.101.45   | TOR exit node, SQLi + brute-force on `/admin` | Block entire IP range (/24 for known TOR exit nodes preferable) |
| 45.146.164.5     | Automated scanner (`zgrab`), file probing     | Block                     |
| 179.60.150.20    | Unauthorized DELETE on `/user/` endpoints     | Block                     |
| 141.98.10.56     | Datacenter scanner, API enumeration           | Block                     |
| 190.2.136.50     | Credential stuffing & API brute-force         | Block                     |

_Optional enhancement_: Integrate with TOR IP blocklists, scanner/dc IP reputation feeds, and update block rules dynamically.

---

## 2. User-Agent Restrictions

Deny requests containing the following **malicious or scanner user-agent patterns**:

- `sqlmap` **(SQL Injection tool)**
- `zgrab` **(vulnerability scanner)**
- `python-requests` **(automation script)**
- `curl/7.*` **(scripting automation, esp. with DELETE methods)**
- **Spoofed Browser User-Agents** with automation signatures (combine with behavioral rules / velocity checks)

**Sample regex rules** for WAF or load balancer ACL:

```regex
.*sqlmap.*
.*zgrab.*
.*python-requests.*
curl\/7\..*
```

---

## 3. Rate Limiting & Abuse Prevention

| Context                             | Proposed Limits                                                     | Enforcement/Reason                                     |
|------------------------------------|---------------------------------------------------------------------|--------------------------------------------------------|
| `/api/auth` endpoint               | Max **5 login attempts/minute/IP**, 30/hour                        | Deter API key brute-force and credential stuffing      |
| All authentication endpoints       | Max **5 failed authentications per user/IP per 10 minutes**        | Lockout/account throttle after repeated failures       |
| `/admin` POST, PUT methods         | Max **3 requests per minute / IP**                                 | Prevents brute-force and exploitation                  |
| General API enumeration (anonymous or unauthenticated access) | Max **20 requests per minute per IP on API endpoints** with HEAD/OPTIONS methods | Thwart fast enumeration/service mapping attempts       |
| Global requests from unauthenticated users | Max **60 requests per minute**, with exponential backoff penalties | Generic flood control                                  |

_Implement lockouts or captcha for brute force attempts; consider longer bans on repeated offenders._

---

## 4. Endpoint Access Controls and Restrictions

- **Restrict `/admin`**

  - Allow only **authenticated, role-validated, MFA-enabled** users.
  - DENY all **POST** and **PUT** requests from unauthenticated or suspicious sources outright.
  - Block **TOR exit nodes** and suspicious IPs persistently.

- **Restrict sensitive files access**

  - Completely disallow **any public access** to:
    - `/.env`
    - `/hidden-status`
    - `/wp-config.php`
    - `/.git/config`
    - `/phpinfo.php`

  - Enforce strict HTTP `403 Forbidden` for these paths at the web server level (`nginx`, `Apache`), such as:

    ```nginx
    location ~ /\.(env|git|ht|.*config)$ {
        deny all;
        return 403;
    }
    ```

    Or equivalent:

    ```apache
    <FilesMatch "^(\.env|wp-config\.php|\.git|phpinfo\.php|hidden-status)$">
        Order allow,deny
        Deny from all
    </FilesMatch>
    ```

- **HTTP Method enforcement**

  - `/admin`: Only allow `GET` by default unless POST/PUT is strictly required **after MFA/auth**.
  - `/api/auth`: Allow **POST** (sign-in, token refresh), disallow **PUT**, **DELETE** unless tightly authenticated.
  - `/user/`: Allow `GET`/`POST`, block `DELETE` from unauthenticated or role-insufficient users. DELETE only permitted via elevated roles, after confirmation.

- **Disable non-standard methods**

  - Globally deny unexpected methods (e.g., `TRACK`, `CONNECT`, `TRACE`, unwarranted `OPTIONS`).
  - For APIs, limit to documented HTTP methods per endpoint.

---

## 5. Additional Recommended WAF Rules

- **Pattern-based SQLi detection**

  - Block requests matching SQL injection patterns — e.g., `' OR 1=1`, `UNION SELECT`, `'--`, etc., using known ModSecurity OWASP CRS rules.

- **Block known scanner signatures**

  - Regex signatures for typical payloads and headers seen in scans (non-browser User-Agents, header anomalies, large numbers of error codes in rapid succession).

- **Geolocation-based restrictions**

  - Consider blocking high-risk regions or regions with zero legitimate traffic volume, or trigger stepped-up authentication for those geos.

---

## 6. Summary of Priority Actions for Immediate Implementation

- IP blocklist application (IPs above)
- User-Agent filtering policy activation
- Endpoint-specific strict method whitelisting
- Rate limiting rules enforcement
- Hidden/sensitive file access blocks at the webserver level
- Application of SQLi and scanner/detection WAF core rules

---

## 7. Ongoing Improvements (Beyond Immediate)

- Enable **GeoIP fencing** as applicable.
- Implement **multi-factor authentication** especially for `/admin` and `/api/auth`.
- Deploy advanced **bot/automation detection & challenges**.
- Audit and patch vulnerable endpoints.
- Enhance monitoring and alerting for excessive errors, unusual data volumes, or timing anomalies.

---

# Summary Table: Block List and Restrictions

| Aspect             | Details                                                                             |
|--------------------|-------------------------------------------------------------------------------------|
| **Block IPs**      | `185.220.101.45`, `45.146.164.5`, `179.60.150.20`, `141.98.10.56`, `190.2.136.50`   |
| **Deny User-Agents** | `"sqlmap"`, `"zgrab"`, `"python-requests"`, `"curl/7.*"`                         |
| **Limit Access To** | `/admin`, `/.env`, `/hidden-status`, `/wp-config.php`, `/.git/config`, `/phpinfo.php` |
| **Rate Limits**    | 5 login attempts/min, 3 admin POST/PUT/min, 20 API enum/min, 60 unauth/min          |
| **HTTP Methods**   | Allow only documented/authenticated methods; block unexpected PUT/DELETE            |
| **File Access**    | Deny `.env`, hidden files, config files at server level                             |

---

_This strategy promptly addresses the specific threats observed between March 1–31, 2024, focusing on blocking automated attacks, enumeration, privilege escalation, and data exfiltration attempts identified._
```